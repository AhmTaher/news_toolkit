"use strict";(self.webpackChunkflutter_news_toolkit_docs=self.webpackChunkflutter_news_toolkit_docs||[]).push([[34],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:3,description:"Learn how to write and run tests in your application."},a="Testing",s={unversionedId:"flutter_development/testing",id:"flutter_development/testing",title:"Testing",description:"Learn how to write and run tests in your application.",source:"@site/docs/flutter_development/testing.md",sourceDirName:"flutter_development",slug:"/flutter_development/testing",permalink:"/news_toolkit/flutter_development/testing",draft:!1,editUrl:"https://github.com/flutter/news_toolkit/tree/main/docs/docs/flutter_development/testing.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Learn how to write and run tests in your application."},sidebar:"tutorialSidebar",previous:{title:"Working with Translations",permalink:"/news_toolkit/flutter_development/translations"},next:{title:"Theming",permalink:"/news_toolkit/flutter_development/theming"}},l={},p=[{value:"Unit Tests",id:"unit-tests",level:2},{value:"Widget Tests",id:"widget-tests",level:2},{value:"Bloc Tests",id:"bloc-tests",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing"},"Testing"),(0,o.kt)("p",null,"Flutter News Toolkit applications come with 100% test coverage out-of-the-box. Tests are located in a parallel file structure relative to your source code, residing in a ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," directory which mirrors the source code ",(0,o.kt)("inlineCode",{parentName:"p"},"lib")," directory. Tests are automatically run on your app using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/VeryGoodOpenSource/very_good_workflows"},"Very Good Workflows"),"."),(0,o.kt)("p",null,"Changes you make to your source code such as ",(0,o.kt)("a",{parentName:"p",href:"/project_configuration/ads#removing-ads"},"removing advertisements")," may reduce test coverage or cause existing tests to fail. We recommend maintaining 100% test coverage within your application in order to support stability and scalability, but your application functionality will not be compromised if you forgo 100% test coverage."),(0,o.kt)("p",null,"To support 100% test coverage in your application, ensure that your tests capture any changes you make to the app behavior. For example, if you implement a new widget ",(0,o.kt)("inlineCode",{parentName:"p"},"your_widget.dart"),", create a corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"your_widget_test.dart")," file which properly tests your new widget's behavior."),(0,o.kt)("p",null,"Your Flutter app's test suite contains bloc, unit, and widget tests."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The Flutter community offers ",(0,o.kt)("a",{parentName:"p",href:"https://verygood.ventures/blog/flutter-testing-resources"},"excellent testing resources")," to guide you in developing effective tests for your application.")),(0,o.kt)("h2",{id:"unit-tests"},"Unit Tests"),(0,o.kt)("p",null,"Unit tests evaluate a single method, function, or class within your codebase. You should test that your unit behaves appropriately under all conditions under which it might be executed."),(0,o.kt)("p",null,"For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"news_repository_test.dart")," tests whether the ",(0,o.kt)("inlineCode",{parentName:"p"},"NewsRepository")," class can be instantiated, handle error cases correctly, and correctly execute its behavior under both success and error conditions."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Flutter's ",(0,o.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/cookbook/testing/unit/introduction"},"Introduction to Unit Testing")," cookbook provides further information on unit testing.")),(0,o.kt)("h2",{id:"widget-tests"},"Widget Tests"),(0,o.kt)("p",null,"Widget tests verify that a single widget behaves correctly within the Flutter framework using a testing environment that enables UI interactions and behaviors."),(0,o.kt)("p",null,"For example this test from ",(0,o.kt)("inlineCode",{parentName:"p"},"bottom_nav_bar_test.dart")," checks that the proper behavior is executed when the user interacts with the ",(0,o.kt)("inlineCode",{parentName:"p"},"BottomNavBar")," widget:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"testWidgets('calls onTap when navigation bar item is tapped', (tester) async {\n    final completer = Completer<void>();\n\n    await tester.pumpApp(\n        Scaffold(\n        body: Container(),\n        bottomNavigationBar: BottomNavBar(\n            currentIndex: 0,\n            onTap: (value) => completer.complete(),\n        ),\n        ),\n    );\n    await tester.ensureVisible(find.byType(BottomNavigationBar));\n    await tester.tap(find.byIcon(Icons.home_outlined));\n    expect(completer.isCompleted, isTrue);\n});\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Flutter's ",(0,o.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/cookbook/testing/widget/introduction"},"Introduction to Widget Testing")," cookbook provides further information on widget testing.")),(0,o.kt)("h2",{id:"bloc-tests"},"Bloc Tests"),(0,o.kt)("p",null,"Bloc tests verify that your app's ",(0,o.kt)("a",{parentName:"p",href:"https://bloclibrary.dev"},"bloc state management library")," behaves as expected under a variety of conditions."),(0,o.kt)("p",null,"A bloc test will set up the test's initial conditions, instantiate the block, and test whether the bloc behaves as expected. This test from ",(0,o.kt)("inlineCode",{parentName:"p"},"analytics_bloc_test.dart")," checks whether the ",(0,o.kt)("inlineCode",{parentName:"p"},"AnalyticsBloc")," responds appropriately to a user being authenticated:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"blocTest<AnalyticsBloc, AnalyticsState>(\n    'calls AnalyticsRepository.setUserId '\n    'with user id when user is authenticated',\n    setUp: () => when(() => userRepository.user)\n        .thenAnswer((_) => Stream.value(user)),\n    build: () => AnalyticsBloc(\n        analyticsRepository: analyticsRepository,\n        userRepository: userRepository,\n    ),\n    verify: (_) {\n        verify(() => analyticsRepository.setUserId(user.id)).called(1);\n    },\n);\n")),(0,o.kt)("p",null,"The test above verifies that a mocked repository is called correctly. Depending on what bloc behavior you are testing, bloc tests can also verify that an error is thrown or that the bloc's state is correct."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("a",{parentName:"p",href:"https://bloclibrary.dev/#/testing"},"bloc library testing documentation")," provides a thorough introduction to testing blocs.")))}u.isMDXComponent=!0}}]);