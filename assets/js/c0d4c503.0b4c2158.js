"use strict";(self.webpackChunkflutter_news_toolkit_docs=self.webpackChunkflutter_news_toolkit_docs||[]).push([[275],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7420:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2,description:"Learn how to connect your news server to a custom data source."},i="Connecting your data source",s={unversionedId:"server_development/connecting_your_data_source",id:"server_development/connecting_your_data_source",title:"Connecting your data source",description:"Learn how to connect your news server to a custom data source.",source:"@site/docs/server_development/connecting_your_data_source.md",sourceDirName:"server_development",slug:"/server_development/connecting_your_data_source",permalink:"/news_toolkit/server_development/connecting_your_data_source",draft:!1,editUrl:"https://github.com/flutter/news_toolkit/tree/main/docs/docs/server_development/connecting_your_data_source.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Learn how to connect your news server to a custom data source."},sidebar:"tutorialSidebar",previous:{title:"Running the API",permalink:"/news_toolkit/server_development/running_the_api"},next:{title:"Testing",permalink:"/news_toolkit/server_development/testing"}},l={},u=[{value:"Creating a new data source",id:"creating-a-new-data-source",level:2},{value:"Implementing your data source",id:"implementing-your-data-source",level:2},{value:"Injecting your data source",id:"injecting-your-data-source",level:2}],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"connecting-your-data-source"},"Connecting your data source"),(0,a.kt)("p",null,"The template's ",(0,a.kt)("a",{parentName:"p",href:"https://dartfrog.vgv.dev"},"Dart Frog")," API acts as an intermediary between your CMS and the client application, organizing your content into the ",(0,a.kt)("a",{parentName:"p",href:"#working-with-blocks"},"blocks")," that form the basis of content organization within the app."),(0,a.kt)("p",null,"If you don't intend to write custom code to support the necessary block-organized endpoints from your CMS, you should create and deploy an API that uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"NewsDataSource")," interface to collect and transform data."),(0,a.kt)("p",null,"Your implementation of the ",(0,a.kt)("inlineCode",{parentName:"p"},"NewsDataSource")," is called by the route handlers laid out in the ",(0,a.kt)("inlineCode",{parentName:"p"},"api/routes")," directory. The data source then requests data from your CMS and organizes it into the block-based data expected by the client before returning it to the route handler to be served to your client application. For more information about the structure and capabilities of the Dart Frog server that uses your data source, consult the ",(0,a.kt)("a",{parentName:"p",href:"https://dartfrog.vgv.dev/docs/category/basics"},"Dart Frog documentation"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"NewsDataSource")," class (",(0,a.kt)("inlineCode",{parentName:"p"},"api/lib/src/data/news_data_source.dart"),") provides an interface that your data source must implement. Feel free to remove methods that provide data that you don't intend to use in the client app, or to add methods to provide data for functionality that you intend on adding to your app."),(0,a.kt)("h2",{id:"creating-a-new-data-source"},"Creating a new data source"),(0,a.kt)("p",null,"Begin by defining a new class that implements ",(0,a.kt)("inlineCode",{parentName:"p"},"NewsDataSource"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class YourCustomDataSource implements NewsDataSource\n")),(0,a.kt)("p",null,"Your data source should have a means of interacting with your CMS as a field such as an ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/packages/http"},"HTTP")," or ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/packages/dio"},"Dio")," client, and you might want to create separate named constructors if you have different CMS URLs for different flavors, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"development")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"production"),"."),(0,a.kt)("h2",{id:"implementing-your-data-source"},"Implementing your data source"),(0,a.kt)("p",null,"After creating your data source class, implement the methods defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"NewsDataSource"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"/// {@template news_data_source}\n/// An interface for a news content data source.\n/// {@endtemplate}\nabstract class NewsDataSource {\n  /// {@macro news_data_source}\n  const NewsDataSource();\n\n  /// Returns a news [Article] for the provided article [id].\n  ///\n  /// In addition, the contents can be paginated by supplying\n  /// [limit] and [offset].\n  ///\n  /// * [limit] - The number of content blocks to return.\n  /// * [offset] - The (zero-based) offset of the first item\n  /// in the collection to return.\n  Future<Article?> getArticle({\n    required String id,\n    int limit = 20,\n    int offset = 0,\n  });\n  /// Returns a list of current popular topics.\n  Future<List<String>> getPopularTopics();\n  /// Returns a list of current relevant topics\n  /// based on the provided [term].\n  Future<List<String>> getRelevantTopics({required String term});\n  /// Returns a list of current popular article blocks.\n  Future<List<NewsBlock>> getPopularArticles();\n  /// Returns a list of relevant article blocks\n  /// based on the provided [term].\n  Future<List<NewsBlock>> getRelevantArticles({required String term});\n  /// Returns [RelatedArticles] for the provided article [id].\n  ///\n  /// In addition, the contents can be paginated by supplying\n  /// [limit] and [offset].\n  ///\n  /// * [limit] - The number of content blocks to return.\n  /// * [offset] - The (zero-based) offset of the first item\n  /// in the collection to return.\n  Future<RelatedArticles> getRelatedArticles({\n    required String id,\n    int limit = 20,\n    int offset = 0,\n  });\n  /// Returns a news [Feed] for the provided [category].\n  /// By default [Category.top] is used.\n  ///\n  /// In addition, the feed can be paginated by supplying\n  /// [limit] and [offset].\n  ///\n  /// * [limit] - The number of results to return.\n  /// * [offset] - The (zero-based) offset of the first item\n  /// in the collection to return.\n  Future<Feed> getFeed({\n    Category category = Category.top,\n    int limit = 20,\n    int offset = 0,\n  });\n\n  /// Returns a list of all available news categories.\n  Future<List<Category>> getCategories();\n}\n")),(0,a.kt)("p",null,"For example, an implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"getArticle()")," might look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nFuture<Article?> getArticle({\n  required String id,\n  int limit = 20,\n  int offset = 0,\n  bool preview = false,\n}) async {\n  final uri = Uri.parse('$YOUR_CMS_BASE_URL/posts/$id');\n  final response = await httpClient.get(uri);\n  if (response.statusCode != HttpStatus.ok) {\n    throw YourAppApiFailureException(\n      body: response.body,\n      statusCode: response.statusCode,\n    );\n  }\n  final responseJson = response.jsonMap();\n  if (responseJson.isNotFound) return null;\n  final post = Post.fromJson(responseJson);\n  final article = post.toArticle();\n  return article;\n}\n")),(0,a.kt)("p",null,"The above example references a class not included in the template, ",(0,a.kt)("inlineCode",{parentName:"p"},"Post"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class Post {\n  const Post({\n    required this.id,\n    required this.date,\n    required this.link,\n    required this.title,\n    required this.content,\n    required this.author,\n    required this.image,\n    required this.category,\n  });\n\n  final int id;\n  final DateTime date;\n  final String link;\n  final String title;\n  final String content;\n  final Author author;\n  final String image;\n  final PostCategory category;\n}\n")),(0,a.kt)("p",null,"Since your CMS presumably doesn't respond with data in the block-based format used by the ",(0,a.kt)("inlineCode",{parentName:"p"},"Article")," class, you might want to define classes like ",(0,a.kt)("inlineCode",{parentName:"p"},"Post")," that mirror the data types and formats that your CMS returns."),(0,a.kt)("p",null,"You can use a package like ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/packages/json_serializable"},"json_serializable")," to generate code to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Post")," object from the JSON returned from your CMS (see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/development/data-and-backend/json"},"JSON and serialization - Flutter Documentation"),")."),(0,a.kt)("p",null,"You can then ",(0,a.kt)("a",{parentName:"p",href:"https://dart.dev/guides/language/extension-methods"},"add an extension method")," such as ",(0,a.kt)("inlineCode",{parentName:"p"},"toArticle()")," on your ",(0,a.kt)("inlineCode",{parentName:"p"},"Post")," class that uses the relevant data from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Post")," object and to create and return an ",(0,a.kt)("inlineCode",{parentName:"p"},"Article")," object that is served to your client app."),(0,a.kt)("p",null,"This structure of ",(0,a.kt)("inlineCode",{parentName:"p"},"JSON -> Intermediary Object -> API Model")," can be repeated when implementing any data source method, which receives data from your CMS that differs from what the method is expected to return."),(0,a.kt)("h2",{id:"injecting-your-data-source"},"Injecting your data source"),(0,a.kt)("p",null,"After creating your data source, inject it into your API route handler through the ",(0,a.kt)("a",{parentName:"p",href:"https://dartfrog.vgv.dev/docs/basics/dependency-injection"},"Dart Frog middleware"),"."),(0,a.kt)("p",null,"First, instantiate your data source:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final yourCustomDataSource = YourCustomDataSource();\n")),(0,a.kt)("p",null,"Then, inject it through the middleware as a ",(0,a.kt)("inlineCode",{parentName:"p"},"NewsDataSource"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"handler.use(provider<NewsDataSource>((_) => yourCustomDataSource));\n")),(0,a.kt)("p",null,"As the template already contains a ",(0,a.kt)("inlineCode",{parentName:"p"},"NewsDataSource")," dependency injection, you can simply instantiate your data source and then replace ",(0,a.kt)("inlineCode",{parentName:"p"},"inMemoryNewsDataSource")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"yourCustomDataSource"),"."))}p.isMDXComponent=!0}}]);