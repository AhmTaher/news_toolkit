"use strict";(self.webpackChunkflutter_news_toolkit_docs=self.webpackChunkflutter_news_toolkit_docs||[]).push([[378],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2363:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:3,description:"Learn how to write and run tests for your API."},i="Testing",s={unversionedId:"server_development/testing",id:"server_development/testing",title:"Testing",description:"Learn how to write and run tests for your API.",source:"@site/docs/server_development/testing.md",sourceDirName:"server_development",slug:"/server_development/testing",permalink:"/news_toolkit/server_development/testing",draft:!1,editUrl:"https://github.com/flutter/news_toolkit/tree/main/docs/docs/server_development/testing.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Learn how to write and run tests for your API."},sidebar:"tutorialSidebar",previous:{title:"Connecting your data source",permalink:"/news_toolkit/server_development/connecting_your_data_source"},next:{title:"Working with blocks",permalink:"/news_toolkit/server_development/blocks"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing"},"Testing"),(0,o.kt)("p",null,"The Flutter News Toolkit server comes with 100% test coverage out of the box. Tests are located in a parallel file structure relative to your server source code, residing in the ",(0,o.kt)("inlineCode",{parentName:"p"},"api/test")," directory that mirrors the ",(0,o.kt)("inlineCode",{parentName:"p"},"api/lib")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"api/routes")," directories. Tests are automatically run on your server codebase using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/VeryGoodOpenSource/very_good_workflows"},"Very Good Workflows"),"."),(0,o.kt)("p",null,"Server tests are written in pure Dart and don't test any Flutter functionality. These tests evaluate the routes, middleware, and any additional classes and functions implemented in the ",(0,o.kt)("inlineCode",{parentName:"p"},"api/lib")," folder."),(0,o.kt)("p",null,"Changes you make to your server such as ",(0,o.kt)("a",{parentName:"p",href:"connecting_your_data_source"},"implementing an API data source")," might reduce test coverage or cause existing tests to fail. We recommend maintaining 100% test coverage within your server in order to support stability and scalability."),(0,o.kt)("p",null,"To support 100% test coverage in your server, make sure that your tests capture any changes you make to the server behavior. For example, if you implement a new data source ",(0,o.kt)("inlineCode",{parentName:"p"},"your_data_source.dart"),", create a corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"your_data_source_test.dart")," file that properly tests your new data source's behavior."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"for information on testing Dart Frog servers, check out the ",(0,o.kt)("a",{parentName:"p",href:"https://dartfrog.vgv.dev/docs/basics/testing"},"Dart Frog testing documentation"),".")))}d.isMDXComponent=!0}}]);